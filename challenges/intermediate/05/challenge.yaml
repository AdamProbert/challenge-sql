title: "Subqueries: Nested SQL Statements"
description: |
  Subqueries are SQL queries nested inside another query, like a Pokedex performing a search within search results. They allow you to use the results of one query as part of another query's conditions or data source.
  
  Subqueries can be used in the:
  - WHERE clause (to filter based on another query's results)
  - FROM clause (to create a derived table)
  - SELECT list (to create a calculated column)
  
  Basic syntax of a subquery in a WHERE clause:
  ```sql
  SELECT column(s)
  FROM table1
  WHERE column_name [operator] (
    SELECT column_name 
    FROM table2
    WHERE condition
  );
  ```
  
  For example, to find Pokemon stronger than the average CP:
  ```sql
  SELECT
      name,
      type,
      cp
  FROM
      pokemon
  WHERE
      cp > (
          SELECT AVG(cp)
          FROM pokemon
      );
  ```

difficulty: "intermediate"

setup:
  - file: "setup.sql"

challenge:
  task: |
    Professor Oak is conducting research on elite Trainers and their Pokemon. He wants to identify Trainers who possess Pokemon with above-average CP compared to the overall Pokemon population.
    
    Write a query that:
    1. Finds all Trainers who have at least one Pokemon with a CP higher than the average CP of all Pokemon
    2. For each of these Trainers, returns:
       - The Trainer's name
       - The number of their Pokemon with above-average CP (as "strong_pokemon_count")
       - The average CP of their above-average Pokemon (as "strong_pokemon_avg_cp")
    3. Orders the results by strong_pokemon_count in descending order
    
    This will help Professor Oak identify which Trainers are collecting and training the strongest Pokemon.
  
  expected_columns:
    - "trainer_name"
    - "strong_pokemon_count"
    - "strong_pokemon_avg_cp"
  
  validation:
    type: "result_set"
    file: "solution.sql"
  
  hints:
    - "First, use a subquery to calculate the average CP of all Pokemon."
    - "Then, use this result in your WHERE clause to filter for Pokemon with above-average CP."
    - "Join the pokemon and trainers tables to get the trainer information."
    - "Group the results by trainer_name to count how many strong Pokemon each Trainer has."
    - "Use HAVING to ensure that only Trainers with at least one strong Pokemon are included."
