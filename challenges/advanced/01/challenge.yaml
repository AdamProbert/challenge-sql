title: "Advanced Pokemon Analytics: Subqueries and Aggregation"
description: |
  This challenge introduces two powerful SQL concepts that Pokemon researchers use: subqueries and aggregation functions.
  
  **Subqueries** are SQL queries that are nested inside a larger query, like a Pokemon that contains another Pokemon (think Kangaskhan with its baby). They can be used in various parts of a SQL statement, such as:
  - In the WHERE clause to filter data
  - In the FROM clause as a data source
  - In the SELECT list to create derived columns
  
  **Aggregation functions** perform calculations on sets of values and return a single value, similar to how the Pokedex calculates overall statistics for Pokemon types. Common aggregation functions include:
  - COUNT(): Counts the number of Pokemon
  - SUM(): Calculates the sum of values (like total CP)
  - AVG(): Calculates the average of values (like average HP)
  - MAX(): Finds the maximum value (like highest Attack stat)
  - MIN(): Finds the minimum value (like lowest Defense stat)
  
  When using aggregation functions with other columns, you typically need to use GROUP BY to specify how to group the rows.

difficulty: "advanced"

# Database setup
setup:
  - file: "setup.sql"

# Challenge details  
challenge:
  task: |
    Professor Oak is conducting regional Pokemon research! Write a query that finds the Pokemon types where the average CP is higher than the global average CP across all Pokemon.
    
    For each such type, return:
    - The Pokemon type
    - The number of Pokemon of that type
    - The average CP of Pokemon with that type (rounded to 2 decimal places)
    
    Sort the results by the average CP in descending order.
  
  expected_columns:
    - "pokemon_type"
    - "pokemon_count" 
    - "avg_cp"
  
  validation:
    type: "result_set"
    file: "solution.sql"
  
  hints:
    - "Use GROUP BY to group Pokemon by type."
    - "Use COUNT() and AVG() aggregation functions, just like the Pokedex calculates statistics."
    - "Create a subquery to calculate the global average CP across all Pokemon."
    - "Use ROUND() to format the average CP to 2 decimal places."
    - "Use HAVING to filter groups based on an aggregate condition, like finding types that exceed the global average."
